name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: ESLint (strict)
        working-directory: backend
        run: npm run lint:strict

  contract-tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Lint OpenAPI
        working-directory: backend
        run: npx redocly lint openapi.yaml
      - name: Lint error codes
        working-directory: backend
        run: npm run lint:error-codes
      - name: Generate & verify operationIds
        working-directory: backend
        run: |
          node scripts/generateOperationIds.js
          git diff --quiet types/operation-ids.d.ts || (echo 'operation-ids.d.ts not committed'; git --no-pager diff types/operation-ids.d.ts; exit 1)
      - name: Generate frontend API types
        run: |
          cd backend && npm run gen:types || true
          git diff --quiet frontend/src/api/generated/schema.d.ts || (echo 'Generated schema.d.ts differs; please commit.'; git --no-pager diff frontend/src/api/generated/schema.d.ts; exit 1)
      - name: Contract tests
        working-directory: backend
        env:
          CONTRACT_ONLY: 1
          SKIP_DB: 1
        run: npm run test:contract

  full-tests:
    needs: contract-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Unit+integration tests (coverage enforced)
        working-directory: backend
        env:
          SKIP_DB: 1
        run: npm run test:ci -- --coverage --coverageReporters=text-summary --coverageReporters=lcov
      - name: Show coverage summary
        run: |
          if [ -f backend/coverage/lcov.info ]; then grep -E '^SF:' backend/coverage/lcov.info | wc -l || true; fi
      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
          if-no-files-found: error
      - name: Health script syntax check
        run: node -c scripts/healthCheck.js || true

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install frontend deps
        run: |
          cd frontend && npm install
      - name: Frontend tests
        run: |
          cd frontend && npm run test -- --coverage --reporter=default
        env:
          CI: true
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage
          if-no-files-found: warn

  health-check:
    runs-on: ubuntu-latest
    needs: full-tests
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps
        run: |
          npm install
          cd backend && npm install
      - name: Start backend (no DB)
        run: |
          SKIP_DB=1 PORT=5001 node backend/index.js &
          echo $! > backend_server.pid
      - name: Wait for server
        run: |
          n=0
          until [ $n -ge 25 ]; do
            curl -fsS http://localhost:5001/api/health/health && break
            n=$((n+1))
            sleep 0.4
          done
      - name: Run health script
        run: node scripts/healthCheck.js
      - name: Stop server
        run: |
          kill $(cat backend_server.pid) || true

  docker-build:
    runs-on: ubuntu-latest
    needs: full-tests
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image
        run: docker build -t serviskol-backend:ci ./backend
      - name: Build frontend image
        run: docker build -t serviskol-frontend:ci ./frontend

  compose-smoke:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      - name: Docker compose up
        run: |
          docker compose up -d --build
          sleep 8
          curl -f http://localhost:5001/api/health/health
          curl -f http://localhost:8080/health || echo 'frontend health not configured'
      - name: Logs (backend)
        if: failure()
        run: docker logs serviskol-backend || true
      - name: Logs (frontend)
        if: failure()
        run: docker logs serviskol-frontend || true
      - name: Compose down
        run: docker compose down -v
